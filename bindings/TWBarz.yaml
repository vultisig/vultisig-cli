class: TWBarz
static_functions:
- name: GetCounterfactualAddress
  rust_name: tw_barz_get_counterfactual_address
  args:
  - name: input
    ty: Nonnull < TWData >
  return_type: NullableMut < TWString >
  docs:
  - Calculate a counterfactual address for the smart contract wallet
  - ''
  - \param input The serialized data of ContractAddressInput.
  - \return The address.
- name: GetInitCode
  rust_name: tw_barz_get_init_code
  args:
  - name: factory
    ty: Nonnull < TWString >
  - name: public_key
    ty: NonnullMut < TWPublicKey >
  - name: verification_facet
    ty: Nonnull < TWString >
  - name: salt
    ty: u32
  return_type: NullableMut < TWData >
  docs:
  - Returns the init code parameter of ERC-4337 User Operation
  - ''
  - \param factory The address of the factory contract.
  - \param public_key Public key for the verification facet
  - \param verification_facet The address of the verification facet.
  - \param salt The salt of the init code.
  - \return The init code.
- name: GetFormattedSignature
  rust_name: tw_barz_get_formatted_signature
  args:
  - name: signature
    ty: Nonnull < TWData >
  - name: challenge
    ty: Nonnull < TWData >
  - name: authenticator_data
    ty: Nonnull < TWData >
  - name: client_data_json
    ty: Nonnull < TWString >
  return_type: NullableMut < TWData >
  docs:
  - Converts the original ASN-encoded signature from webauthn to the format accepted by Barz
  - ''
  - \param signature Original signature
  - \param challenge The original challenge that was signed
  - \param authenticator_data Returned from Webauthn API
  - \param client_data_json Returned from Webauthn API
  - \return Bytes of the formatted signature
- name: GetPrefixedMsgHash
  rust_name: tw_barz_get_prefixed_msg_hash
  args:
  - name: msg_hash
    ty: Nonnull < TWData >
  - name: barz_address
    ty: Nonnull < TWString >
  - name: chain_id
    ty: u32
  return_type: NullableMut < TWData >
  docs:
  - Returns the final hash to be signed by Barz for signing messages & typed data
  - ''
  - \param msg_hash Original msgHash
  - \param barzAddress The address of Barz wallet signing the message
  - \param chainId The chainId of the network the verification will happen
  - \return The final hash to be signed.
- name: GetDiamondCutCode
  rust_name: tw_barz_get_diamond_cut_code
  args:
  - name: input
    ty: Nonnull < TWData >
  return_type: NullableMut < TWData >
  docs:
  - Returns the encoded diamondCut function call for Barz contract upgrades
  - ''
  - \param input The serialized data of DiamondCutInput.
  - \return The diamond cut code.
- name: GetAuthorizationHash
  rust_name: tw_barz_get_authorization_hash
  args:
  - name: chain_id
    ty: Nonnull < TWData >
  - name: contract_address
    ty: Nonnull < TWString >
  - name: nonce
    ty: Nonnull < TWData >
  return_type: NullableMut < TWData >
  docs:
  - Computes an Authorization hash in [EIP-7702 format](https://eips.ethereum.org/EIPS/eip-7702)
  - '`keccak256(''0x05'' || rlp([chain_id, address, nonce]))`.'
  - ''
  - \param chain_id The chain ID of the user.
  - \param contract_address The address of the smart contract wallet.
  - \param nonce The nonce of the user.
  - \return The authorization hash.
- name: SignAuthorization
  rust_name: tw_barz_sign_authorization
  args:
  - name: chain_id
    ty: Nonnull < TWData >
  - name: contract_address
    ty: Nonnull < TWString >
  - name: nonce
    ty: Nonnull < TWData >
  - name: private_key
    ty: Nonnull < TWString >
  return_type: NullableMut < TWString >
  docs:
  - Returns the signed authorization hash
  - ''
  - \param chain_id The chain ID of the user.
  - \param contract_address The address of the smart contract wallet.
  - \param nonce The nonce of the user.
  - \param private_key The private key of the user.
  - \return The signed authorization.
- name: GetEncodedHash
  rust_name: tw_barz_get_encoded_hash
  args:
  - name: chain_id
    ty: Nonnull < TWData >
  - name: code_address
    ty: Nonnull < TWString >
  - name: code_name
    ty: Nonnull < TWString >
  - name: code_version
    ty: Nonnull < TWString >
  - name: type_hash
    ty: Nonnull < TWString >
  - name: domain_separator_hash
    ty: Nonnull < TWString >
  - name: sender
    ty: Nonnull < TWString >
  - name: user_op_hash
    ty: Nonnull < TWString >
  return_type: NullableMut < TWData >
  docs:
  - Returns the encoded hash of the user operation
  - ''
  - \param chain_id The chain ID of the user.
  - \param code_address The address of the smart contract wallet.
  - \param code_name The name of the smart contract wallet.
  - \param code_version The version of the smart contract wallet.
  - \param type_hash The type hash of the smart contract wallet.
  - \param domain_separator_hash The domain separator hash of the smart contract wallet.
  - \param sender The sender of the smart contract wallet.
  - \param user_op_hash The user operation hash of the smart contract wallet.
  - \return The encoded hash.
- name: GetSignedHash
  rust_name: tw_barz_get_signed_hash
  args:
  - name: hash
    ty: Nonnull < TWString >
  - name: private_key
    ty: Nonnull < TWString >
  return_type: NullableMut < TWData >
  docs:
  - Signs a message using the private key
  - ''
  - \param hash The hash of the user.
  - \param private_key The private key of the user.
  - \return The signed hash.
constructors: null
destructor: null
methods: null
properties: null
