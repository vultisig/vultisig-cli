class: TWCryptoBoxSecretKey
static_functions:
- name: IsValid
  rust_name: tw_crypto_box_secret_key_is_valid
  args:
  - name: data
    ty: Nonnull < TWData >
  return_type: bool
  docs:
  - Determines if the given secret key is valid or not.
  - ''
  - \param data *non-null* byte array.
  - \return true if the secret key is valid, false otherwise.
constructors:
- name: Create
  rust_name: tw_crypto_box_secret_key_create
  args: []
  return_type: NonnullMut < TWCryptoBoxSecretKey >
  docs:
  - Create a random secret key.
  - ''
  - \note Should be deleted with \tw_crypto_box_secret_key_delete.
  - \return Nullable pointer to Private Key.
- name: CreateWithData
  rust_name: tw_crypto_box_secret_key_create_with_data
  args:
  - name: data
    ty: Nonnull < TWData >
  return_type: NullableMut < TWCryptoBoxSecretKey >
  docs:
  - Create a `crypto_box` secret key with the given block of data.
  - ''
  - \param data *non-null* byte array. Expected to have 32 bytes.
  - \note Should be deleted with \tw_crypto_box_secret_key_delete.
  - \return Nullable pointer to Secret Key.
destructor:
  name: Delete
  rust_name: tw_crypto_box_secret_key_delete
  args:
  - name: key
    ty: NonnullMut < TWCryptoBoxSecretKey >
  return_type: void
  docs:
  - Delete the given secret `key`.
  - ''
  - \param key *non-null* pointer to secret key.
methods:
- name: GetPublicKey
  rust_name: tw_crypto_box_secret_key_get_public_key
  args:
  - name: key
    ty: NonnullMut < TWCryptoBoxSecretKey >
  return_type: NonnullMut < TWCryptoBoxPublicKey >
  docs:
  - Returns the public key associated with the given `key`.
  - ''
  - \param key *non-null* pointer to the private key.
  - \return *non-null* pointer to the corresponding public key.
properties:
- name: Data
  rust_name: tw_crypto_box_secret_key_data
  args:
  - name: secret_key
    ty: Nonnull < TWCryptoBoxSecretKey >
  return_type: NonnullMut < TWData >
  docs:
  - Returns the raw data of a given secret-key.
  - ''
  - \param secret_key *non-null* pointer to a secret key.
  - \return C-compatible result with a C-compatible byte array.
